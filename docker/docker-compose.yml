services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER}
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-service_db}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      service-network:
        aliases:
          - ${POSTGRES_NAME}
          - db
          - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api-gateway:
    build:
      context: ..
      dockerfile: api-gateway/Dockerfile
    image: ${API_GATEWAY_IMAGE}
    container_name: ${API_GATEWAY_CONTAINER}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - SERVER_PORT=8080
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
      - LOGGING_FORMAT=${LOGGING_FORMAT:-json}
      - DOCKER_ENV=true
    depends_on:
      user-service:
        condition: service_healthy
    networks:
      service-network:
        aliases:
          - ${API_GATEWAY_NAME}
          - gateway
          - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  user-service:
    build:
      context: ..
      dockerfile: services/user-service/Dockerfile
    image: ${USER_SERVICE_IMAGE}
    container_name: ${USER_SERVICE_CONTAINER}
    ports:
      - "${USER_SERVICE_PORT:-8081}:8081"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - SERVER_PORT=8081
      - DATABASE_HOST=${POSTGRES_NAME}
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_NAME=${DATABASE_NAME:-service_db}
      - DATABASE_SSL_MODE=disable
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
      - LOGGING_FORMAT=${LOGGING_FORMAT:-json}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      service-network:
        aliases:
          - ${USER_SERVICE_NAME}
          - users
          - user-svc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  migration:
    image: ${MIGRATION_IMAGE}
    container_name: ${MIGRATION_CONTAINER_NAME}
    profiles: ["migration"]
    volumes:
      - ./services/${SERVICE_NAME}/migrations:/migrations:ro
      - migration_tmp:/tmp/migrations
    environment:
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${POSTGRES_NAME}:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=${DATABASE_SSL_MODE}
    networks:
      - service-network
    command: ["version"]
    depends_on:
       - postgres


   auth-service:
     build:
       context: ..
       dockerfile: services/auth-service/Dockerfile
     image: ${AUTH_SERVICE_SERVICE_IMAGE}
     container_name: ${AUTH_SERVICE_SERVICE_CONTAINER}
     ports:
       - "${AUTH_SERVICE_SERVICE_PORT:-8083}:${AUTH_SERVICE_SERVICE_PORT:-8083}"
     environment:
       - APP_ENV=${APP_ENV:-production}
       - SERVER_PORT=${AUTH_SERVICE_SERVICE_PORT:-8083}
       - DATABASE_HOST=${POSTGRES_NAME}
       - DATABASE_PORT=5432
       - DATABASE_USER=${DATABASE_USER:-postgres}
       - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
       - DATABASE_NAME=${DATABASE_NAME:-service_db}
       - DATABASE_SSL_MODE=disable
       - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
       - LOGGING_FORMAT=${LOGGING_FORMAT:-json}
       - DOCKER_ENV=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      service-network:
        aliases:
          - auth-service
          - auth-service-service
          - auth-service-svc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AUTH_SERVICE_SERVICE_PORT:-8083}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME}
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/postgres_data

  api_gateway_tmp:
    name: ${API_GATEWAY_TMP_VOLUME}
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/api-gateway/tmp

  user_service_tmp:
    name: ${USER_SERVICE_TMP_VOLUME}
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/user-service/tmp

  migration_tmp:
    name: ${MIGRATION_TMP_VOLUME}
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/tmp/migrations


  auth-service_service_tmp:
    name: ${AUTH_SERVICE_SERVICE_TMP_VOLUME}
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/auth-service/tmp
networks:
  service-network:
    name: ${NETWORK_NAME}
    driver: ${NETWORK_DRIVER}
    labels:
      - "com.service-boilerplate.network=backend"
      - "com.service-boilerplate.project=service-boilerplate"

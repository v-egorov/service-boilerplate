version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: service-boilerplate-postgres
    environment:
      POSTGRES_DB: service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    container_name: service-boilerplate-gateway
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=production
      - SERVER_PORT=8080
    depends_on:
      user-service:
        condition: service_healthy
    networks:
      - service-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    container_name: service-boilerplate-user-service
    ports:
      - "8081:8081"
    environment:
      - APP_ENV=production
      - SERVER_PORT=8081
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=service_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - service-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  service-network:
    driver: bridge
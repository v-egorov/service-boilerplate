services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER}
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-service_db}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      service-network:
        aliases:
          - ${POSTGRES_NAME}
          - db
          - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api-gateway:
    build:
      context: ..
      dockerfile: api-gateway/Dockerfile
    image: ${API_GATEWAY_IMAGE}
    container_name: ${API_GATEWAY_CONTAINER}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - SERVER_PORT=8080
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
      - LOGGING_FORMAT=${LOGGING_FORMAT:-json}
      - DOCKER_ENV=true
    depends_on:
      user-service:
        condition: service_healthy
    networks:
      service-network:
        aliases:
          - ${API_GATEWAY_NAME}
          - gateway
          - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  user-service:
    build:
      context: ..
      dockerfile: services/user-service/Dockerfile
    image: ${USER_SERVICE_IMAGE}
    container_name: ${USER_SERVICE_CONTAINER}
    ports:
      - "${USER_SERVICE_PORT:-8081}:8081"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - SERVER_PORT=8081
      - DATABASE_HOST=${POSTGRES_NAME}
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_NAME=${DATABASE_NAME:-service_db}
      - DATABASE_SSL_MODE=disable
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
      - LOGGING_FORMAT=${LOGGING_FORMAT:-json}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      service-network:
        aliases:
          - ${USER_SERVICE_NAME}
          - users
          - user-svc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
    name: postgres_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/postgres_data

  api_gateway_tmp:
    name: api_gateway_tmp
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/api-gateway/tmp

  user_service_tmp:
    name: user_service_tmp
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/user-service/tmp

networks:
  service-network:
    name: ${NETWORK_NAME}
    driver: ${NETWORK_DRIVER}
    labels:
      - "com.service-boilerplate.network=backend"
      - "com.service-boilerplate.project=service-boilerplate"
